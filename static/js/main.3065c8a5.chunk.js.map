{"version":3,"sources":["GoogleMaps.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["GoogleMaps","react_default","a","createElement","tabIndex","aria-hidden","aria-label","id","Component","Nav","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","query","setState","loadMap","window","initMap","src","ref","document","getElementsByTagName","script","async","defer","parentNode","insertBefore","loadMapsAPI","map","google","maps","Map","getElementById","center","lat","lng","zoom","styles","elementType","stylers","color","featureType","visibility","infowindow","InfoWindow","state","venues","aVenue","contentString","concat","venue","name","location","address","marker","Marker","title","icon","animation","Animation","DROP","position","key","markers","push","filteredVenues","addListener","setAnimation","BOUNCE","setTimeout","setZoom","setCenter","setContent","open","panTo","getPosition","tick","currentPosition","filter","console","log","getInfo","_this2","setVenueState","bind","fetch","URLSearchParams","client_id","client_secret","near","radius","v","method","then","response","json","groups","items","catch","error","alert","filterByInput","toLowerCase","includes","forEach","setVisible","_this3","src_Nav","src_GoogleMaps","type","placeholder","onChange","e","filterVenues","target","value","onClick","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAWeA,gMANX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,SAAS,KAAKC,cAAY,OAAOC,aAAW,mDAAmDC,GAAG,eAJpFC,cCWVC,mLARX,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SAASJ,aAAW,sDAAsDF,SAAS,KAClGH,EAAAC,EAAAC,cAAA,sFALYK,aCigBHG,kBAzfb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAEZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,YAAc,SAACC,GACbR,EAAKS,SAAS,CACZD,MAAOA,KAdGR,EAwBdU,QAAU,WACRC,OAAOC,QAAUZ,EAAKY,QAud1B,SAAqBC,GACnB,IAAMC,EAAMH,OAAOI,SAASC,qBAAqB,UAAU,GACrDC,EAASN,OAAOI,SAASxB,cAAc,UAC7C0B,EAAOJ,IAAMA,EACbI,EAAOC,OAAQ,EACfD,EAAOE,OAAQ,EACfL,EAAIM,WAAWC,aAAaJ,EAAQH,GA5dlCQ,CACE,+IA3BUtB,EA4EdY,QAAU,WACR,IAAMW,EAAM,IAAIZ,OAAOa,OAAOC,KAAKC,IAAIX,SAASY,eAAe,OAAQ,CACrEC,OAAQ,CAAEC,IAAK,UAAWC,IAAK,WAC/BC,KAAM,GAENC,OAAQ,CACN,CACEC,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEF,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEF,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,yBACbH,YAAa,kBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,6BACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,0BACbH,YAAa,kBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,qBACbH,YAAa,kBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,oBACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,MACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,MACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,MACbH,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,eACbF,QAAS,CACP,CACEG,WAAY,SAIlB,CACED,YAAa,WACbH,YAAa,gBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,WACbH,YAAa,cACbC,QAAS,CACP,CACEG,WAAY,SAIlB,CACED,YAAa,WACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,OACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,OACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,OACbH,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,gBACbF,QAAS,CACP,CACEG,WAAY,SAIlB,CACED,YAAa,eACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,eACbH,YAAa,kBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,eACbH,YAAa,SACbC,QAAS,CACP,CACEG,WAAY,SAIlB,CACED,YAAa,eACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,eACbH,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,aACbF,QAAS,CACP,CACEG,WAAY,SAIlB,CACED,YAAa,UACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,UACbH,YAAa,qBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,eACbH,YAAa,gBACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,kBACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,QACbH,YAAa,WACbC,QAAS,CACP,CACEC,MAAO,aAIb,CACEC,YAAa,QACbH,YAAa,mBACbC,QAAS,CACP,CACEC,MAAO,gBAeXG,EAAa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","file":"static/js/main.3065c8a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass GoogleMaps extends Component {\r\n\r\n    render() {\r\n    return (\r\n      <div tabIndex=\"-1\" aria-hidden=\"true\" aria-label=\"Map with available Coffee shops within Bucharest\" id=\"map\"/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleMaps;\r\n","import React, { Component } from 'react';\r\n\r\nclass Nav extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\" aria-label=\"Search for cheapest coffee places arround Bucharest\" tabIndex=\"0\">\r\n      <h3>COFFEE TIME: Search for cheapest coffee places arround Bucharest</h3>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"whatwg-fetch\";\r\n//import { Venues } from './Venues';\r\nimport GoogleMaps from \"./GoogleMaps\"\r\nimport Nav from './Nav'\r\n//import SideBar from './SideBar'\r\n\r\nclass App extends Component {\r\n  //proper usage of constructor and super https://reactjs.org/docs/react-component.html\r\n  constructor() {\r\n\r\n    super();\r\n    //state of component which will receive info from foursquare api\r\n    this.state = {\r\n      query: '', //empty string which will receive input from user and will show markers according to the search\r\n      filteredVenues: [], //empty array which will be filled once the function getinfo loads the information from foursquare api async request\r\n      markers: [],\r\n      venues: []\r\n    };\r\n  }\r\n\r\n  updateQuery = (query) => {\r\n    this.setState({\r\n      query: query\r\n})\r\n}\r\n\r\n  componentDidMount() {\r\n    //when the componentDidMount starts the loadmap function should be loaded to get google maps and also should call getinfo function to load foursquare api\r\n    this.getInfo();\r\n    //console.log(this.getInfo);\r\n  }\r\n\r\n  loadMap = () => {\r\n    window.initMap = this.initMap;\r\n    loadMapsAPI(\r\n      \"https://maps.googleapis.com/maps/api/js?libraries=places,geometry,drawing&key=AIzaSyD8jbgZnV1lh455L-twNQh45MFwRVIKleU&v=3&callback=initMap\"\r\n    );\r\n    //console.log(window.initMap)\r\n  };\r\n\r\n  //https://developer.foursquare.com/docs/api\r\n  //create venue app using react with foursquare api http://stevebrown.co/journal/creating-a-local-venue-app-using-reactredux-with-the-foursquare-api-part-i\r\n  // react docs, ajax and apis https://reactjs.org/docs/faq-ajax.html\r\n  getInfo(query) {\r\n    //this is necesary as we are working with constructor and super definitions\r\n    let setVenueState = this.setState.bind(this);\r\n    //variable which saves default foursquare url\r\n    const venuesAPI = \"https://api.foursquare.com/v2/venues/explore?\";\r\n    //variable wich saves details of foursquare such as id and type of information we are requesting\r\n    const params = {\r\n      client_id: \"RI1LDPFFA2C2K0C0DP0TBBY2JTWA30F2O0DNMJTZRQGVXL3P\", //foursquare client id\r\n      client_secret: \"P2RAP3W3EO4MGJDOVUQEA0FG1YEWMG23LMR00A3WHZ55GNQL\", // foursquare client secret\r\n      query: \"coffee\", //type of information we are requesting to foursquare api\r\n      near: \"Bucarest\", //near bucarest city\r\n      radius: \"50000\", //radius of requested data on Bucharest\r\n      v: \"20190902\" //date\r\n    };\r\n    //async request, reading and updating query params https://javascriptplayground.com/url-search-params/\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n    fetch(venuesAPI + new URLSearchParams(params), {\r\n      method: \"GET\"\r\n    })\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        //console.log(response.response.groups[0].items)\r\n        //after setting this state we receive 30 venues in react console log\r\n        setVenueState(\r\n          {  venues: response.response.groups[0].items },\r\n          this.loadMap()\r\n          //because it's an async request, the loadMap function should be executed AFTER we receive information from external source\r\n        );\r\n        this.markers = [] //empty array of markers which will be filled later on\r\n      })\r\n      //console.log(response);\r\n      .catch(error => {\r\n        // Code for handling errors, an alert message will popup when there is an error loading foursquare api\r\n        alert(\r\n          \"Ups! We're sorry, something went wrong while loading Foursquare info  >:(  try again by pressing OK button\"\r\n        );\r\n        //console.log(\"error \" + error);\r\n      });\r\n  }\r\n  //third required part to load the map, map variable plus js function to load the map\r\n  //https://developers.google.com/maps/documentation/javascript/tutorial\r\n  initMap = () => {\r\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n      center: { lat: 44.435524, lng: 26.102536 },\r\n      zoom: 15,\r\n      //google maps style wizard https://mapstyle.withgoogle.com/\r\n      styles: [\r\n        {\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#1d2c4d\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#8ec3b9\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#1a3646\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"administrative.country\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#4b6878\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"administrative.land_parcel\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#64779e\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"administrative.province\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#4b6878\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"landscape.man_made\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#334e87\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"landscape.natural\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#023e58\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#283d6a\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#6f9ba5\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi\",\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#1d2c4d\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi.business\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi.park\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#023e58\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi.park\",\r\n          elementType: \"labels.text\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"poi.park\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#3C7680\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#304a7d\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#98a5be\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road\",\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#1d2c4d\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.arterial\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#2c6675\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"geometry.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#255763\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"labels\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#b0d5ce\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.highway\",\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#023e58\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"road.local\",\r\n          stylers: [\r\n            {\r\n              visibility: \"off\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"transit\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#98a5be\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"transit\",\r\n          elementType: \"labels.text.stroke\",\r\n          stylers: [\r\n            {\r\n              color: \"#1d2c4d\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"transit.line\",\r\n          elementType: \"geometry.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#283d6a\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"transit.station\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#3a4762\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"water\",\r\n          elementType: \"geometry\",\r\n          stylers: [\r\n            {\r\n              color: \"#0e1626\"\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          featureType: \"water\",\r\n          elementType: \"labels.text.fill\",\r\n          stylers: [\r\n            {\r\n              color: \"#4e6d70\"\r\n            }\r\n          ]\r\n        }\r\n      ] //don't forget this line has been collapsed to the quantity of code\r\n    });\r\n    //adding variable for the searchbox input field and autocomplete\r\n    //const searchBox = new window.google.maps.places.Autocomplete(\r\n      //document.getElementById(\"places-search\")\r\n    //);\r\n    // Bias the searchbox to within the bounds of the map.\r\n    //searchBox.bindTo(\"bounds\", map);\r\n\r\n    //https://developers.google.com/maps/documentation/javascript/infowindows\r\n    //removed below variable \"infowindow\" from array function (this.state.venues.map) to avoid multiple open infowindows simultaneosly\r\n    const infowindow = new window.google.maps.InfoWindow();\r\n    //marker function should load at the same time with google maps function, they should display simultaneosly\r\n    //project code 3 windowsshoppingpart1, quote: uses the location array to create an array of markers on initialize, for react should be used .map using venue's state\r\n    //using map to loop over venues state, inital state empty but will retrieve the 30 venues we got from the fetch call\r\n    this.state.venues.map(aVenue => {\r\n      //variable which will load the infowindow in the page, will provide name of the place and address\r\n      const contentString = `${aVenue.venue.name},\r\n      ${aVenue.venue.location.address}. Data courtesy of Foursquare`;\r\n      //variable which saves marker's new icon\r\n      const image = \"https://i.ibb.co/3NTwxhp/coffee-icon.png\"\r\n      //variable which loads the markers in the page\r\n      let marker = new window.google.maps.Marker({\r\n        title: aVenue.venue.name,\r\n        map: map,\r\n        icon: image,\r\n        animation: window.google.maps.Animation.DROP,\r\n        position: {\r\n          lat: aVenue.venue.location.lat,\r\n          lng: aVenue.venue.location.lng,\r\n          key: aVenue.venue.id\r\n        }\r\n      });\r\n      //add new markers to marker array, so we can use it to filter through search each marker\r\n      this.markers.push(marker);\r\n      //console.log(marker)\r\n      this.setState({ filteredVenues: this.state.venues })\r\n      //console.log(this.state.venues)\r\n      //function which will listen for clicks in the markers and will animate the icon for 900 ms, also will zoom in selected marker\r\n      marker.addListener(\"click\", function() {\r\n        marker.setAnimation(window.google.maps.Animation.BOUNCE);\r\n        setTimeout(() => { marker.setAnimation(null)}, 1000)\r\n        this.map.setZoom(18);\r\n        this.map.setCenter(marker.position)\r\n        //display content on InfoWindow\r\n        infowindow.setContent(contentString);\r\n        infowindow.open(map, marker);\r\n      });\r\n      return marker;\r\n    });\r\n    //function which will listen for infowindow close button, once the x is clicked will zoom out the area\r\n    infowindow.addListener(\"closeclick\", function() {\r\n        map.panTo(this.getPosition());\r\n        map.setZoom(15);\r\n    })\r\n  };\r\n\r\n//function which will show the markers that match text input from the searchbox area\r\nfilterVenues(query) {\r\n  //console.log(query)\r\n  //got 30 items\r\n  let filterByInput = this.state.venues.filter(venues => venues.venue.name.toLowerCase().includes(query.toLowerCase()))\r\n  //changed filter method for foreach method as we are not returning a value\r\n  this.markers.forEach(marker => {\r\n    //console.log(marker)\r\n    //filter the markers by name and set visibility to true if it matches the query\r\n      marker.title.toLowerCase().includes(query.toLowerCase()) === true ?\r\n      marker.setVisible(true) :\r\n      marker.setVisible(false);\r\n    })\r\n    //this.state.venues.forEach(venues => {\r\n      //return venues.venue.name.toLowerCase().includes(query.toLowerCase()) === true ?\r\n      //console.log(venues.venue.name) :\r\n      //console.log('false')\r\n    //})\r\n    this.setState({ filteredVenues: filterByInput, query });\r\n  }\r\n\r\n  tick = (filteredVenues) => {\r\n    let currentPosition = this.state.markers.filter(marker => marker.id === currentPosition.id)[0];\r\n    console.log(currentPosition) //undefined no matter what\r\n    //this.markers.setAnimation(window.google.maps.Animation.BOUNCE);\r\n    //setTimeout(() => { this.markers.setAnimation(null)}, 1000)\r\n    //this.map.setZoom(18);\r\n  }\r\n\r\n  render() {\r\n    //const venueList = this.state.venues.map((venues, query) =>\r\n    //<Venues key={venues.venue.id} name={venues.venue.name} onClick={(event) =>\r\n    ///>\r\n    //code on return between ol {venueList}\r\n  //)\r\n//console.log(venueList.marker)\r\n//function venueLi(query) {\r\n//  const listItems = this.state.query\r\n//  console.log(this.state.query)\r\n//}\r\n//{this.state.filterByInput && this.state.filterByInput.lenght > 0 && this.state.filterByInput.map((venues) => (\r\n//  <ol key={venues.id}>\r\n//))\r\n//}\r\n\r\n    return (\r\n        <main id=\"main\" tabIndex=\"-1\">\r\n          <Nav/>\r\n          <GoogleMaps/>\r\n          <div className=\"options-box\" tabIndex=\"-1\">\r\n          <div className=\"markers-title\" tabIndex=\"-1\" aria-label=\"Search area\">Search for nearby places</div>\r\n          <input\r\n              id=\"places-search\"\r\n              type=\"text\"\r\n              aria-label=\"Search for your favorite coffee by typing here\"\r\n              tabIndex=\"0\"\r\n              placeholder=\"Type name of fav coffee place\"\r\n              /*on change the event listener invokes filterVenues, then calls setState*/\r\n              onChange={(e) => this.filterVenues(e.target.value)}\r\n              /*below the value will be the state of what the user wrote*/\r\n              value={this.state.query}\r\n              />\r\n              <input className=\"submit-button\" type=\"submit\" value=\"Submit\" tabIndex=\"0\" aria-label=\"Submit button to request a place\"/>\r\n              <div className=\"dd\" tabIndex=\"-1\">\r\n              {this.state.filteredVenues.map((venues) => (\r\n              <ol onClick={this.tick} key={venues.venue.id} className=\"venues-list\" tabIndex=\"0\" aria-label=\"Results for searched coffee specifications\">\r\n              {venues.venue.name}\r\n              </ol>\r\n              ))\r\n              }\r\n          {/*<div>\r\n            <input id=\"show-listings\" type=\"button\" value=\"Show all places\"/>\r\n            <input id=\"hide-listings\" type=\"button\" value=\"Hide them all\" />\r\n          </div>*/}\r\n          {/*second request to add the map, a div with the id of map*/}\r\n          </div>\r\n          </div>\r\n        </main>\r\n    );\r\n  }\r\n}\r\n\r\n//first part to add the map to the App, loading the API\r\n//updated script functionallity, as previously was causing a bug https://www.klaasnotfound.com/2016/11/06/making-google-maps-work-with-react/\r\nfunction loadMapsAPI(src) {\r\n  const ref = window.document.getElementsByTagName(\"script\")[0];\r\n  const script = window.document.createElement(\"script\");\r\n  script.src = src;\r\n  script.async = true;\r\n  script.defer = true;\r\n  ref.parentNode.insertBefore(script, ref);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if ('serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\n//workboxSW.router.registerRouter('https://fonts.googleapis.com/(.*)',\r\n//workboxSW.strategies.cacheFirst({\r\n  //cacheName: 'googleapis',\r\n  //cacheExpiration: {maxEntries: 20},\r\n  //cacheableResponse: {statuses: [0,200]}\r\n//})\r\n//);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}